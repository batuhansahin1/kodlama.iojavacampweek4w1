package kodlama.io.Kodlama.io.Devs.dataAccess.concretes;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import kodlama.io.Kodlama.io.Devs.dataAccess.abstracts.ProgrammingLanguageDao;
import kodlama.io.Kodlama.io.Devs.entities.ProgrammingLanguages;

public class InMemoryProgrammingLanguagesDao implements ProgrammingLanguageDao {

	List<ProgrammingLanguages> languages;
	Scanner scanner=new Scanner(System.in);
	
	public InMemoryProgrammingLanguagesDao() {
		languages= new ArrayList<ProgrammingLanguages>();
	languages.add(new ProgrammingLanguages(1,"C"));
	languages.add(new ProgrammingLanguages(2,"Phyton"));
	languages.add(new ProgrammingLanguages(3,"Java"));
	languages.add(new ProgrammingLanguages(4,"C++"));
	languages.add(new ProgrammingLanguages(5,"Ruby"));
	
	}


	@Override
	public List<ProgrammingLanguages> getAll() {
	
		return languages ;
	}


	@Override
	public List<ProgrammingLanguages> add(ProgrammingLanguages language) {
		
		languages.add(language);
		
		return languages ;
		
	}


	@Override
	public void getById(int id) {
		
		for(ProgrammingLanguages i:languages) {
			
			if(id==i.getId()) {
				System.out.println(i.getName());
			break;
			}
		}
		
		
	}


	@Override
	public void update(int id) {
		for(ProgrammingLanguages a:languages) {
		if(a.getId()==id) {
			a.setName(scanner.nextLine());
			System.out.println("Updated language:"+a.getId()+a.getName());
			break;
		}
		}
		
	}


	@Override
	public List<ProgrammingLanguages> delete(ProgrammingLanguages language) {
languages.remove(language);

return languages;		
	}


	
	

}
